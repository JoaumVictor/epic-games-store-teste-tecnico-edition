# docker-compose.yml
version: "3.8" # Vers√£o da sintaxe do Docker Compose

services:
  # Servi√ßo para o Banco de Dados MongoDB üçÉ
  mongodb:
    image: mongo:latest # Usamos a imagem oficial mais recente do MongoDB
    container_name: mongodb_container # Um nome amig√°vel para o seu container do MongoDB
    ports:
      - "27018:27017" # Mapeia a porta 27017 do host para a porta 27017 do container (padr√£o do MongoDB)
    volumes:
      - mongo_data:/data/db # Persiste os dados do MongoDB em um volume chamado 'mongo_data'
    restart: always # Garante que o container reinicie automaticamente se parar
    networks:
      - app_network # Conecta o MongoDB √† rede da aplica√ß√£o

  # Servi√ßo para o Backend NestJS üöÄ
  backend:
    build:
      context: ./backend # O Docker vai procurar o Dockerfile na pasta 'backend'
      dockerfile: Dockerfile # O nome do arquivo Dockerfile
    container_name: nestjs_backend # Um nome amig√°vel para o seu container do backend
    ports:
      - "3000:3000" # Mapeia a porta 3000 do host para a porta 3000 do container (padr√£o do NestJS)
    depends_on:
      - mongodb # Garante que o MongoDB inicie antes do backend
    environment:
      # Vari√°veis de ambiente para o NestJS se conectar ao MongoDB
      MONGO_URI: mongodb://mongodb:27017/game_store # O 'mongodb' no host √© o nome do servi√ßo no docker-compose
    restart: always # Garante que o container reinicie automaticamente se parar
    networks:
      - app_network # Conecta o backend √† rede da aplica√ß√£o

# Defini√ß√£o de Volumes para persist√™ncia de dados üíæ
volumes:
  mongo_data: # Volume onde os dados do MongoDB ser√£o armazenados, mesmo se o container for removido

# Defini√ß√£o de Redes para comunica√ß√£o entre os servi√ßos üåê
networks:
  app_network: # Rede interna para que os containers possam se comunicar pelo nome do servi√ßo
    driver: bridge # Tipo de rede padr√£o
